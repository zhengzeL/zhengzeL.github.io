[{"content":"安装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 # 1. 卸载旧的版本 yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine # 2. 需要的安装包 yum install -y yum-utils # 3. 设置镜像的仓库 yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # 4. 更新yum软件包索引 yum makecache fast # 5. 安装docker相关的依赖 yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin # 6. 启动docker systemctl start docker # 7. 使用docker version查看是否安装成功 # 8. Hello world docker run hello-world # 9. 查看一下下载的这个hello-world镜像 docker images 卸载 1 2 3 4 5 6 # 1. 卸载依赖 yum remove docker-ce docker-ce-cli containerd.io docker-compose-plugin # 2. 删除资源 rm -rf /var/lib/docker #docker的默认工作路径 rm -rf /var/lib/containerd 阿里云镜像加速 登录阿里云找到容器服务 找到镜像加速地址 ","date":"2023-01-10T00:00:00Z","image":"https://zhengzel.github.io/p/docker%E5%85%A5%E9%97%A8/background_huf71beb32f0975070546e028c0080edd1_145623_120x120_fill_q75_box_smart1.jpg","permalink":"https://zhengzel.github.io/p/docker%E5%85%A5%E9%97%A8/","title":"Docker入门"},{"content":" 命令行前加sudo，可以加权，普通用户可以执行一些root的操作，root用户则无需使用\n","date":"2023-01-10T00:00:00Z","image":"https://zhengzel.github.io/p/linux%E5%85%A5%E9%97%A8/background_hu17c71f546c30281edc50786cb15de534_125917_120x120_fill_q75_box_smart1.jpg","permalink":"https://zhengzel.github.io/p/linux%E5%85%A5%E9%97%A8/","title":"Linux入门"},{"content":"本质 是面向对象设计原则的实际运用 优点 可以提高程序员的思维能力，编程能力和设计能力 使程序设计更加标准化，代码编制更加工程化，软件开发效率大大提高，缩短了项目的开发周期 使设计的代码可复用性高，可读性强，可靠性高，灵活性好，可维护性强 GoF23 创建型模式：单例模式，工厂模式，抽象工厂模式，建造者模式，原型模式 结构型模式：适配器模式，桥接模式，装饰模式，组合模式，外观模式，享元模式，代理模式 行为型模式：模板方法模式，命令模式，迭代器模式，观察者模式，中介者模式，备忘录模式，解释器模式,状态模式，策略模式，职责链模式，访问者模式 OOP七大原则 开闭原则：对扩展开放，对修改关闭（新增功能块不影响其他功能块的工作，能独立的工作） 里氏替换原则：继承必须确保父类所拥有的性质在子类中仍然成立(子类尽量不要重写父类的方法，要在原有的基础上扩展) 依赖倒置原则：要面向接口编程，不要面向实现编程 单一职责原则：控制类的粒度大小，将对象解耦，提高其内聚性(一个方法尽量做一件事情 ) 接口隔离原则：要为各个类建立它们需要的专用接口 迪米特法则：只和你的直接朋友交谈，不跟 “ 陌生人” 讲话 合成复用原则：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现 单例模式 饿汉式单例 可能会浪费空间 懒汉式单例 解决了饿汉式的弊端，在需要用的时候，再加载需要的对象 工厂模式 核心本质：实例化对象不使用new,用工厂方法替代\n简单工厂模式 工厂方法模式 抽象工厂模式 简单工厂模式(静态工厂模式) 对于增加的新的产品，需要覆盖已有代码\n！虽然某种程度上不符合设计原则，但实际使用最多\n工厂方法模式 在不修改已有类的前提下，通过增加新的工厂类实现扩展\n抽象工厂模式 围绕一个超级工厂创建其他工厂，该超级工厂又称为其他工厂的工厂\n建造者模式 优点 产品的建造和表示分离，实现了解耦，使用建造者模式可以使客户端不必知道产品内部组成的细节 将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰 具体的建造者类之间是相互独立的，这有利于系统的扩展，增加新的具体建造者无需修改原有的代码，符合开闭原则 缺点 建造者模式创建的产品一般具有较多的共同点，如果产品差异性很大，就不适合使用建造者模式 如果产品的内部变化复杂，则需要定义很多具体建造者来实现这种变化，系统会变得很庞大 原型模式 实质是将创建的对象进行克隆，提高程序效率\n适配器模式 例子 \u0026mdash; 电脑 - 转接器 - 网线\n桥接模式 最佳实践 \u0026ndash; 一个类存在两个独立变化的维度，且这两个维度都需要进行扩展\n静态代理 例子 \u0026mdash; 租房的人，中介，房东\n动态代理 动态代理的代理类是动态生成的，不是我们直接写好的！ 动态代理分为两大类：基于接口的动态代理，基于类的动态代理 ","date":"2022-12-30T00:00:00Z","image":"https://zhengzel.github.io/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%A5%E9%97%A8/background_hue324fec1f8d8395b7b28e0e32e0dc587_86513_120x120_fill_q75_box_smart1.jpg","permalink":"https://zhengzel.github.io/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%A5%E9%97%A8/","title":"设计模式入门"},{"content":"概念 分布式协调服务 \u0026mdash; 实质是分布式锁 什么是分布式锁 ","date":"2022-12-23T00:00:00Z","image":"https://zhengzel.github.io/p/zookeeper%E5%88%9D%E6%8E%A2/background_hub1fdd9b6168bbde3eaa5087e4bf6af99_129657_120x120_fill_q75_box_smart1.jpg","permalink":"https://zhengzel.github.io/p/zookeeper%E5%88%9D%E6%8E%A2/","title":"Zookeeper初探"},{"content":"解决方案 Spring Boot + Spring Cloud （特点：组件多 功能完备 Http通信） \u0026mdash; 成熟的微服务架构解决方案 Spring Boot + Dubbo + Zookeeper （特点：组件少 功能非完备 RPC框架通信） 常见问题 客户端如何访问这么多的服务？ \u0026mdash; API网关\n服务与服务之间如何通信？\n同步通信 ​\tHTTP（Apache Http Client）\n​\tRPC（Dubbo\u0026mdash;只支持Java Apache Thrift gPRC）\n异步通信\n​\t消息队列（Kafka RabbitMQ RocketMQ）\n这么多服务，如何管理？\n服务治理\n​\t服务注册与发现\n​\t基于客户端的服务注册与发现\n​\tZookeeper\n​\t基于服务端的服务注册与发现\n​\tEureka\n服务挂了，怎么办？（重试机制 服务熔断 服务降级 服务限流）\n最大的问题 \u0026mdash;\u0026gt; 网络是不可靠的\n","date":"2022-12-23T00:00:00Z","image":"https://zhengzel.github.io/p/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8E%A2%E7%B4%A2/background_hub4d49487ea9e10ea596b27dab7564aa2_1096215_120x120_fill_box_smart1_3.png","permalink":"https://zhengzel.github.io/p/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8E%A2%E7%B4%A2/","title":"微服务探索"},{"content":"了解阿里云用户权限操作 进入Accesskey管理 登录阿里云，点击工作台，进入后台\n点击头像下方的AccessKey管理，使用子用户\n用户组创建与权限分配 创建用户组\n添加短信服务权限\n用户创建 创建用户（注意勾选OpenAPI调用访问）添加到用户组中\nAccessKey ID\n开通阿里云短信服务 添加签名 进入短信服务控制台\n点击国内消息，即可添加签名\n添加签名 (无需添加【】符号，会自动添加)，注意场景说明，审核通过即可\n创建模板 模板内容可以在常用模板库中查找，场景说明注意事项同上 右侧可以预览效果，审核通过即可\n编写测试代码 帮助文档：HelpDos\n创建SpringBoot项目并导入依赖 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.aliyun\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tea-openapi\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.2.5\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.aliyun\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;dysmsapi20170525\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.23\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":"2022-12-14T00:00:00Z","image":"https://zhengzel.github.io/p/%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81%E6%9C%8D%E5%8A%A1/background_hu93a62d240f11e8aa3a3e3557db25aa68_54671_120x120_fill_q75_box_smart1.jpg","permalink":"https://zhengzel.github.io/p/%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81%E6%9C%8D%E5%8A%A1/","title":"短信发送服务"},{"content":"实体类 公共的字段，如id,createTime,updateTime,提取出来，放到一个公共的类上，其他的实体类继承 每个实体类都需要实现Serializable接口(序列化) URL路径 所有的接口必须根据该接口的版本，在 /api 后添加 /v1 或其他版本号。且根据该接口的功能在随后添加功能。（例：/api/v1/auth/login） 请求方式采用 Restful 风格，例：GET POST PUT DELETE，这四种请求方式必须与业务相契合。 数据库设计 主键 Id 的类型应设为 bigint，数据库字符集应设为 utf8_mb4 每张表必须含有创建时间与更新时间这两个关键字段 每个字段一定要写备注 当字段设为 not null 时，应为其设置默认值 Redis 在redisTemplete的基础上封装一个redisUtils加以利用 ","date":"2022-12-13T00:00:00Z","image":"https://zhengzel.github.io/p/java%E7%9C%9F%E5%AE%9E%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/background_hu467fe8a469c9dd15ae2f318aa21eec43_109857_120x120_fill_q75_box_smart1.jpg","permalink":"https://zhengzel.github.io/p/java%E7%9C%9F%E5%AE%9E%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/","title":"Java真实开发规范"},{"content":"概念 Filter : 过滤器，用来过滤网站的数据\n作用 处理中文乱码 登录验证 流程 ","date":"2022-12-13T00:00:00Z","image":"https://zhengzel.github.io/p/springboot%E5%B0%8F%E8%AE%B0/background_hu9099bbeb7de511b6e027296562b69dae_240565_120x120_fill_q75_box_smart1.jpg","permalink":"https://zhengzel.github.io/p/springboot%E5%B0%8F%E8%AE%B0/","title":"Springboot小记"},{"content":"概念 Filter : 过滤器，用来过滤网站的数据\n作用 处理中文乱码 登录验证 流程 ","date":"2022-12-11T00:00:00Z","image":"https://zhengzel.github.io/p/filter%E8%BF%87%E6%BB%A4%E5%99%A8/background_hu72070b12d64f00df02a8337603afefd0_92687_120x120_fill_q75_box_smart1.jpg","permalink":"https://zhengzel.github.io/p/filter%E8%BF%87%E6%BB%A4%E5%99%A8/","title":"Filter(过滤器)"},{"content":"使用hugo新建站点 在任意位置新建一个文件夹，用于存放博客文件，执行\n1 hugo new site . 则会创建出如下文件：\n","date":"2022-12-04T00:00:00Z","image":"https://zhengzel.github.io/p/hugo-stack%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%80/background_huaada557d81dfacc1dcb88c7c9b70ae20_166679_120x120_fill_q75_box_smart1.jpg","permalink":"https://zhengzel.github.io/p/hugo-stack%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%80/","title":"hugo+Stack搭建个人博客(一)"}]